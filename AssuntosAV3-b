A1)
a) Consultas Aninhadas:

    Consultas aninhadas são usadas para retornar informações de uma tabela com base em informações de outra tabela. No exemplo fornecido, 
a consulta retorna os nomes dos clientes que têm aluguéis ativos. O SQL realiza o seguinte:
        Seleciona os nomes dos clientes (colunas first_name e last_name) da tabela customer.
        Usa a cláusula WHERE para filtrar apenas os clientes cujo customer_id existe na subconsulta.
        A subconsulta seleciona customer_id da tabela rental para identificar os aluguéis ativos (onde return_date é nulo).

b) Consultas Aninhadas Correlacionadas:

    Consultas aninhadas correlacionadas são usadas quando a subconsulta faz referência a uma coluna da consulta principal. 
No exemplo, a consulta principal retorna filmes cuja duração é maior que a média da duração de todos os filmes.
A subconsulta correlacionada calcula a média de duração dos filmes na tabela film e a consulta principal compara a duração de cada filme com essa média.

c) EXISTS:

    A cláusula EXISTS é usada para retornar verdadeiro se a subconsulta retornar algum resultado. No exemplo fornecido, 
a consulta retorna clientes que fizeram pelo menos um aluguel. A subconsulta verifica se há pelo menos um registro na tabela rental relacionado ao cliente na tabela customer.
Se a subconsulta encontrar pelo menos um resultado, a condição EXISTS é verdadeira e o cliente é incluído no resultado.

d) UNIQUE ou DISTINCT:

    A cláusula DISTINCT é usada para remover valores duplicados de um conjunto de resultados. 
No exemplo, a consulta retorna todas as cidades distintas na tabela de endereços (address). Isso garante que cada cidade seja listada apenas uma vez no resultado, 
eliminando duplicatas.

e) Junções Naturais:

    Junções naturais unem tabelas com base nas colunas que têm o mesmo nome. 
No exemplo, a consulta retorna informações de clientes e aluguéis combinando automaticamente as colunas com o mesmo nome (por exemplo, customer_id e rental_date). 
Isso evita a necessidade de especificar explicitamente as colunas de junção.

f) Junção LEFT ou RIGHT:

    As junções LEFT ou RIGHT são usadas para realizar uma junção mantendo todos os registros da tabela à esquerda (LEFT) ou à direita (RIGHT). 
No exemplo, a consulta retorna todos os clientes, mesmo que eles não tenham aluguéis. Os aluguéis nulos são incluídos no resultado porque uma junção LEFT JOIN é usada.

g) Agregação:

    A agregação é usada para realizar cálculos em grupos de registros. No exemplo, a consulta calcula o número de aluguéis por loja. 
A função COUNT é usada para contar o número de registros de aluguel agrupados por loja (store_id) usando a cláusula GROUP BY.

h) GROUP BY:

    A cláusula GROUP BY é usada para agrupar registros com base em uma ou mais colunas. No exemplo, a consulta calcula a duração média dos aluguéis para cada loja. 
Os registros são agrupados por store_id, e a função AVG é usada para calcular a média da duração dos aluguéis em cada grupo.

A2) fornecer o comando de criação de uma visão;
A visão é uma representação virtual dos dados que permite que você acesse informações de clientes juntamente com seus endereços de forma mais conveniente. 
Aqui estão algumas consultas de exemplo que você pode executar usando a visão:

1- Selecionar todos os clientes com seus respectivos endereços da visão:
SELECT * FROM customer_info;

Esta consulta retornará todos os clientes com suas informações pessoais e detalhes de endereço em uma única consulta.

2- Filtrar clientes de uma cidade específica:
SELECT * FROM customer_info WHERE city = 'NomeDaCidade';

Substitua 'NomeDaCidade' pela cidade desejada. Isso retornará todos os clientes que têm um endereço nessa cidade.

3-Encontrar clientes com base em seu ID:
SELECT * FROM customer_info WHERE customer_id = 1;

Substitua '1' pelo ID do cliente desejado. Isso retornará as informações do cliente específico juntamente com seu endereço.

4- Contar o número de clientes na visão:
SELECT COUNT(*) FROM customer_info;

Isso retornará o número total de clientes na visão.

A visão "customer_info" simplifica a consulta de informações de clientes e seus endereços, eliminando a necessidade de escrever junções complexas toda vez que você precisar 
dessas informações. Lembre-se de que a visão é apenas uma representação dos dados subjacentes e não armazena dados reais; 
ela é atualizada automaticamente à medida que os dados nas tabelas de clientes e endereços são modificados. Isso facilita a consulta de informações de forma mais eficiente.
