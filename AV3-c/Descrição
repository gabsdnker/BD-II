Nome: Gabrielli Danker e Gabriel Carvalho

Nome do banco de dados: gabi
Nome da tabela: faculdade
Colunas da tabela "faculdade": id, nome, idade, email , cpf, curso, semenstre

--Criando a tabela "faculdade" no banco de dados "gabi"
CREATE TABLE gabi.faculdade (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255),
    idade INT,
    email VARCHAR(255),
    cpf VARCHAR(14),
    curso VARCHAR(255),
    semestre INT
);

--Criando uma tabela para armazenar as versões da tabela "faculdade" com um carimbo de v1, v2, v3, etc...:
CREATE TABLE gabi.faculdade_versions (
    version_id INT AUTO_INCREMENT PRIMARY KEY,
    version_name VARCHAR(10),
    id INT,
    nome VARCHAR(255),
    idade INT,
    email VARCHAR(255),
    cpf VARCHAR(14),
    curso VARCHAR(255),
    semestre INT,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

---Criando um trigger que gere automaticamente o nome da versão com o formato "v1", "v2", "v3"
DELIMITER //
CREATE TRIGGER faculdade_version
BEFORE INSERT ON gabi.faculdade
FOR EACH ROW
BEGIN
    DECLARE next_version INT;
    SET next_version = (SELECT IFNULL(MAX(version_id), 0) + 1 FROM gabi.faculdade_versions);
    SET NEW.version_name = CONCAT('v', next_version);
    
    INSERT INTO gabi.faculdade_versions (version_name, id, nome, idade, email, cpf, curso, semestre)
    VALUES (NEW.version_name, OLD.id, OLD.nome, OLD.idade, OLD.email, OLD.cpf, OLD.curso, OLD.semestre);
END;
//
DELIMITER ;

--Criando a VIEW
CREATE OR REPLACE VIEW gabi.faculdade_version_view AS
SELECT
    CONCAT('v', v.version_id) AS version_name,
    f.id,
    f.nome,
    f.idade,
    f.email,
    f.cpf,
    f.curso,
    f.semestre,
    v.timestamp
FROM gabi.faculdade_versions v
JOIN gabi.faculdade f ON v.id = f.id;
